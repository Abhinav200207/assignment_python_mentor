# -*- coding: utf-8 -*-
"""Assignment 5

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xZrS7fH5Ove5p8K6AaTxZOkB4U6dckrO
"""

# 1
print("="*60)
class Students:
    def __init__(self, name, age, grade):
        self.name = name
        self.age = age
        self.grade = grade

s = Students("Abhinav", 22, "A")
print(s.name, s.age, s.grade)

# 2
print("="*60)
class Students:
    pass

# 3
print("="*60)
class Staff:
    def __init__(self, name, dept):
        self.name = name
        self.dept = dept

class Teacher(Staff):
    def __init__(self, name, dept, subject):
        super().__init__(name, dept)
        self.subject = subject

t = Teacher("Abhinav", "DE", "Python")
print(t.name, t.dept, t.subject)

# 4
print("="*60)
class Students:
    def __init__(self, name, age, grade):
        self.name = name
        self.age = age
        self.grade = grade

s = Students("Abhinav", 22, "A")
print(vars(s))

# 5
print("="*60)
class Teacher:
    def __init__(self, name, age, salary):
        self.name = name
        self.age = age
        self.__salary = salary

t = Teacher("Abhinav", 40, 50000)
print(t.name, t.age)

# 6
print("="*60)
class Box:
    def __init__(self, weight):
        self.weight = weight

    def __add__(self, other):
        return Box(self.weight + other.weight)

    def __gt__(self, other):
        return self.weight > other.weight

b1 = Box(10)
b2 = Box(15)
b3 = b1 + b2
print(b3.weight)
print(b1 > b2)

# 7
print("="*60)
class A:
    pass

class B(A):
    pass

print(issubclass(B, A))

# 8
print("="*60)
class A:
    def __init__(self, x, y):
        self.x = x
        self.y = y

obj = A(10, 20)
print(dir(obj))

# 9
print("="*60)
class Stack:
    def __init__(self):
        self.stack = []

    def push(self, item):
        self.stack.append(item)

    def pop(self):
        if not self.is_empty():
            return self.stack.pop()

    def is_empty(self):
        return len(self.stack) == 0

    def traverse(self):
        for item in self.stack:
            print(item)

s = Stack()
s.push(1)
s.push(2)
s.push(3)
s.push(4)
s.traverse()
s.pop()
s.traverse()

# 10
print("="*60)
class SampleClass:
    pass

obj = SampleClass()
print(obj.__class__.__name__)

# 11
print("="*60)
class Square:
  def __init__(self,a):
    self.a = a

  def area(self):
    return self.a*self.a

  def perimeter(self):
    return 4*self.a

sq = Square(10)
print(sq.area())
print(sq.perimeter())

