# -*- coding: utf-8 -*-
"""Assignment 8

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AXgLujRfRdIhsHG8CwZQBoNT7wmes1rq
"""

# 1 & 2 & 3 & 4 & 5 & 6 7
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class SinglyLinkedList:
    def __init__(self):
        self.head = None

    def append(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
        else:
            temp = self.head
            while temp.next:
                temp = temp.next
            temp.next = new_node

    def iterate(self):
        temp = self.head
        while temp:
            print(temp.data,end=" ")
            temp = temp.next

    def size(self):
        count = 0
        temp = self.head
        while temp:
            count += 1
            temp = temp.next
        return count

    def search(self, data):
        temp = self.head
        while temp:
            if temp.data == data:
                return True
            temp = temp.next
        return False

    def get(self, index):
        temp = self.head
        count = 0
        while temp:
            if count == index:
                return temp.data
            temp = temp.next
            count += 1
        return None

    def set(self, index, value):
        temp = self.head
        count = 0
        while temp:
            if count == index:
                temp.data = value
                return
            temp = temp.next
            count += 1

    def delete_first(self):
        if self.head:
            self.head = self.head.next

    def delete_last(self):
        if self.head:
            if not self.head.next:
                self.head = None
            else:
                temp = self.head
                while temp.next.next:
                    temp = temp.next
                temp.next = None

sll = SinglyLinkedList()
sll.append(10)
sll.append(20)
sll.append(30)
print("Lenght:",end=" ")
print(sll.size())
print("Search:",end=" ")
print(sll.search(20))
print(sll.search(40))
print("Iterate",end=" ")
sll.iterate()
print()
print("Get:")
print(sll.get(1))
print("Set:")
sll.set(1, 50)
sll.iterate()
print()
print("After deliting:")
sll.delete_first()
sll.iterate()
sll.append(90)
sll.append(70)
sll.delete_last()

# 8 & 9 & 10 & 11 & 12 & 13 & 14
print()
print("="*60)
class DNode:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None

class DoublyLinkedList:
    def __init__(self):
        self.head = None

    def append(self, data):
        new_node = DNode(data)
        if not self.head:
            self.head = new_node
        else:
            temp = self.head
            while temp.next:
                temp = temp.next
            temp.next = new_node
            new_node.prev = temp

    def insert_front(self, data):
        new_node = DNode(data)
        if not self.head:
            self.head = new_node
        else:
            self.head.prev = new_node
            new_node.next = self.head
            self.head = new_node

    def reverse_print(self):
        temp = self.head
        if not temp:
            return
        while temp.next:
            temp = temp.next
        while temp:
            print(temp.data, end=" ")
            temp = temp.prev
        print()

    def iterate(self):
        temp = self.head
        while temp:
            print(temp.data, end=" ")
            temp = temp.next
        print()

    def count(self):
        count = 0
        temp = self.head
        while temp:
            count += 1
            temp = temp.next
        return count

    def search(self, data):
        temp = self.head
        while temp:
            if temp.data == data:
                return True
            temp = temp.next
        return False

    def delete(self, data):
        temp = self.head
        while temp:
            if temp.data == data:
                if temp.prev:
                    temp.prev.next = temp.next
                if temp.next:
                    temp.next.prev = temp.prev
                if temp == self.head:
                    self.head = temp.next
                return
            temp = temp.next

dll = DoublyLinkedList()

dll.append(10)
dll.append(20)
dll.append(30)
dll.iterate()

print("reverse:")
dll.reverse_print()

dll.insert_front(5)
print("itereate:")
dll.iterate()

print("count:")
print(dll.count())

print("search:")
print(dll.search(20))
print(dll.search(50))

print("delete:")
dll.delete(20)
dll.iterate()

dll.delete(5)
dll.iterate()

