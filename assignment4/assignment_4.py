# -*- coding: utf-8 -*-
"""Assignment 4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/150710AqE2imzNnsT4A2UVATKa50PHpVx
"""

# 1
def wrapper(f):
    def fun(l):
        formatted = []
        for num in l:
            num = num[-10:]
            formatted.append("+91 " + num[:5] + " " + num[5:])
        f(sorted(formatted))
    return fun

@wrapper
def print_numbers(l):
    for num in l:
        print(num)

n = int(input())
num = [input().strip() for _ in range(n)]
print_numbers(num)

# 2
print("="*60)
import tracemalloc

def memory_decorator(func):
    def inner(*args, **kwargs):
        tracemalloc.start()
        result = func(*args, **kwargs)
        current, peak = tracemalloc.get_traced_memory()
        tracemalloc.stop()
        print(f"Memory Usage: {peak / 1024} KB")
        return result
    return inner

@memory_decorator
def example_function():
    a = [i for i in range(1000)]
    return sum(a)

example_function()

# 3
print("="*60)
def decorator_1(f):
    def inner(*args, **kwargs):
        print("Decorator 1")
        return f(*args, **kwargs)
    return inner

def decorator_2(f):
    def inner(*args, **kwargs):
        print("Decorator 2")
        return f(*args, **kwargs)
    return inner

@decorator_1
@decorator_2
def my_function():
    print("Function executed")

my_function()

# 4
print("="*60)
import csv
from prettytable import PrettyTable

def csv_decorator(f):
    def inner(*args, **kwargs):
        with open(args[0], 'r') as file:
            reader = csv.reader(file)
            table = PrettyTable(next(reader))
            for row in reader:
                table.add_row(row)
            print(table)
        return f(*args, **kwargs)
    return inner

@csv_decorator
def read_csv(file):
    pass

file_name = 'sample.csv'
read_csv(file_name)

